import os
import glob
import pandas as pd
import io
import xml.etree.ElementTree as ET
import argparse
import csv
import cv2


def write_to_csv(filename, data):  # writes the given data to the csv filename provided
    with open(filename, 'a') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(data)
    csvfile.close()


def xml_to_csv(path, distribute_data_dir, create_dir=True):
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines
    them in a single Pandas dataframe.

    Parameters:
    ----------
    path : str
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """

    xml_list = []
    jpg_is_missing = 0
    distribute_dirs_path = create_distribution_dirs(distribute_data_dir)
    distribution_count_dict = {k: 0 for k in distribute_dirs_path.keys()}

    for xml_file in glob.glob(path + '/*.xml'):
        if not os.path.exists(xml_file.replace('xml', 'jpg')):
            jpg_is_missing += 1
            continue
        face_status = []
        person_status = []
        tree = ET.parse(xml_file)
        root = tree.getroot()
        # filename = root.find('filename').text
        filename = os.path.basename(xml_file).replace('xml', 'jpg')
        width = int(root.find('size').find('width').text)
        height = int(root.find('size').find('height').text)
        for idx, member in enumerate(root.findall('object')):
            bndbox = member.find('bndbox')
            value = (filename,
                     width,
                     height,
                     member.find('name').text,
                     int(bndbox.find('xmin').text),
                     int(bndbox.find('ymin').text.split('.')[0]),
                     int(bndbox.find('xmax').text),
                     int(bndbox.find('ymax').text),
                     )
            xml_list.append(value)
            if member.find('name').text == 'face':
                face_status.append(True)
            if member.find('name').text == 'person':
                person_status.append(True)

        if not face_status and person_status:
            if len(person_status) > 1:
                distribution_count_dict['Multiple/Face_Not_Visible'] += 1
                if create_dir:
                    os.system('cp {} {}/'.format(xml_file, distribute_dirs_path['Multiple/Face_Not_Visible']))
                    os.system('cp {} {}/'.format(xml_file.replace('xml', 'jpg'),
                                                 distribute_dirs_path['Multiple/Face_Not_Visible']))
            else:
                distribution_count_dict['Single/Face_Not_Visible'] += 1
                if create_dir:
                    os.system('cp {} {}/'.format(xml_file, distribute_dirs_path['Single/Face_Not_Visible']))
                    os.system('cp {} {}/'.format(xml_file.replace('xml', 'jpg'),
                                                distribute_dirs_path['Single/Face_Not_Visible']))

        if face_status and person_status:
            if len(face_status) > 1:
                distribution_count_dict['Multiple/Both_Faces_Visible'] += 1
                if create_dir:
                    res = os.system('cp {} {}/'.format(xml_file, distribute_dirs_path['Multiple/Both_Faces_Visible']))
                    os.system('cp {} {}/'.format(xml_file.replace('xml', 'jpg'),
                                               distribute_dirs_path['Multiple/Both_Faces_Visible']))
            elif len(person_status) > 1:
                distribution_count_dict['Multiple/Single_Face_Visible'] += 1
                if create_dir:
                    os.system('cp {} {}/'.format(xml_file, distribute_dirs_path['Multiple/Single_Face_Visible']))
                    os.system('cp {} {}/'.format(xml_file.replace('xml', 'jpg'),
                                                 distribute_dirs_path['Multiple/Single_Face_Visible']))
            else:
                distribution_count_dict['Single/Face_Visible'] += 1
                if create_dir:
                    os.system('cp {} {}/'.format(xml_file, distribute_dirs_path['Single/Face_Visible']))
                    os.system('cp {} {}/'.format(xml_file.replace('xml', 'jpg'),
                                                 distribute_dirs_path['Single/Face_Visible']))

    column_name = ['filename', 'width', 'height',
                   'class', 'xmin', 'ymin', 'xmax', 'ymax']
    xml_df = pd.DataFrame(xml_list, columns=column_name)
    print(distribution_count_dict, jpg_is_missing)
    return xml_df, distribution_count_dict


def create_distribution_dirs(dataset_path):
    os.system('rm -rf {}/*'.format(dataset_path))
    folders = ['Single/Face_Visible', 'Single/Face_Not_Visible', 'Multiple/Face_Visible', 'Multiple/Face_Not_Visible',
               'Multiple/Both_Faces_Visible', 'Multiple/Single_Face_Visible']
    output_dir = {}
    for i in folders:
        os.system('mkdir -p {}'.format(os.path.join(dataset_path, i)))
        output_dir[i] = os.path.join(dataset_path, i)
    return output_dir


if __name__ == '__main__':
    # dataset_dir_path = '/home/prabodh/workspace/Person_Detector/client_data/data/august_labelled'
    dataset_dir_path = '/home/prabodh/workspace/tf_workspace/images_person_voco/train'
    distribute_data_dir = '/home/prabodh/workspace/Person_Detector/person_face_dataset_v1/voco_distribution'
    # data = xml_to_csv(dataset_dir_path, distribute_data_dir)
    for i in os.listdir('/home/prabodh/workspace/Person_Detector/Image_Dataset/client_data/data'):
        print(i)
        dataset_dir_path = '/home/prabodh/workspace/Person_Detector/Image_Dataset/client_data/data/{}'.format(i)
        distribute_data_dir = '/home/prabodh/workspace/Person_Detector/Image_Dataset/client_data/distribution/{}'.format(i)
        data = xml_to_csv(dataset_dir_path, distribute_data_dir, create_dir=True)

