import os
import glob
import pandas as pd
import io
import xml.etree.ElementTree as ET
import argparse
import csv

classes_tob_trained = ['person']


def write_to_csv(filename, data):  # writes the given data to the csv filename provided
    with open(filename, 'a') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(data)
    csvfile.close()


def xml_to_csv(path, images_dir_path, output_dir_path):
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines
    them in a single Pandas dataframe.

    Parameters:
    ----------
    path : str
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """

    xml_list = []
    person_class_files = []
    for xml_file in glob.glob(path + '/*.xml'):
        face_status = []
        person_status = []
        tree = ET.parse(xml_file)
        root = tree.getroot()
        # filename = root.find('filename').text
        filename = os.path.basename(xml_file).replace('xml', 'jpg')
        width = int(root.find('size').find('width').text)
        height = int(root.find('size').find('height').text)
        for idx, member in enumerate(root.findall('object')):
            bndbox = member.find('bndbox')
            value = (filename,
                     width,
                     height,
                     member.find('name').text,
                     int(bndbox.find('xmin').text),
                     int(bndbox.find('ymin').text.split('.')[0]),
                     int(bndbox.find('xmax').text),
                     int(bndbox.find('ymax').text),
                     )
            xml_list.append(value)
            if member.find('name').text not in classes_tob_trained:
                root.remove(member)
            elif os.path.basename(xml_file) not in person_class_files:
                person_class_files.append(os.path.basename(xml_file))

        if os.path.basename(xml_file) in person_class_files:
            tree.write('{}/{}'.format(output_dir_path, os.path.basename(xml_file)))
            img_path = os.path.join(images_dir_path, os.path.basename(xml_file).replace('xml', 'jpg'))
            img_write_path = os.path.join(output_dir_path, os.path.basename(xml_file).replace('xml', 'jpg'))
            try:
                cv2.imwrite(img_write_path, cv2.imread(img_path))
            except:
                print(img_path)
    column_name = ['filename', 'width', 'height',
                   'class', 'xmin', 'ymin', 'xmax', 'ymax']
    xml_df = pd.DataFrame(xml_list, columns=column_name)

    return xml_df, person_class_files


if __name__ == '__main__':
    import cv2
    dataset_dir_path = '/home/prabodh/workspace/Person_Detector/person_face_dataset_v1/Sheetal_Rutuja_Face_Filtering1/Sheetal_Face_Visible'
    imgs_path =  '/home/prabodh/workspace/Person_Detector/person_face_dataset_v1/Sheetal_Rutuja_Face_Filtering1/Sheetal_Face_Visible'
    dataset_dir_path = '/home/prabodh/data/VOCdevkit/VOC2012/Annotations'
    imgs_path = '/home/prabodh/data/VOCdevkit/VOC2012/JPEGImages'
    # dataset_dir_path = '/home/prabodh/workspace/Person_Detector/person_face_dataset_v1/Background/180'
    # imgs_path = '/home/prabodh/workspace/Person_Detector/person_face_dataset_v1/Background/180'
    output_dir_path = '/home/prabodh/workspace/Person_Detector/person_face_dataset_v1/person_voco_client_v1/images/train2'
    # os.system('rm -rf {}/*'.format(output_dir_path))
    data = xml_to_csv(dataset_dir_path, imgs_path, output_dir_path)
    print(len(data[1]))
